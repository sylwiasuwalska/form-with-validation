{"version":3,"sources":["FormExample.js","App.js","serviceWorker.js","index.js"],"names":["FormExample","props","initialErrors","name","number","email","password","text","radioBoxOption","checkboxOption","useState","validated","setValidate","stateErrors","setErrors","validEmailRegex","RegExp","validPasswordRegex","handleChange","event","target","value","errors","length","test","checked","className","Form","onSubmit","preventDefault","valid","Object","values","forEach","val","validateForm","noValidate","Row","Group","as","Col","Label","htmlFor","Control","type","onChange","isInvalid","rows","Check","label","required","Button","variant","onClick","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4d15111e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport \"./Form.css\";\nimport Col from \"react-bootstrap/Col\";\n\nfunction FormExample(props) {\n  const initialErrors = {\n    name: \"Please, provide a name.\",\n    number: \"Number must be 8 characters long.\",\n    email: \"Please provide a valid e-mail.\",\n    password:\n      \"Password must be minimum eight characters, at least one letter and one number.\",\n    text: \"Enter your message.\",\n    radioBoxOption: \"One of these options is required.\",\n    checkboxOption: \"This checkbox is required.\",\n  };\n\n  const [validated, setValidate] = useState(false);\n  const [stateErrors, setErrors] = useState(initialErrors);\n\n  const validEmailRegex = RegExp(\n    /^(([^<>()[\\],;:\\s@]+(\\.[^<>()[\\],;:\\s@]+)*)|(.+))@(([^<>()[\\],;:\\s@]+\\.)+[^<>()[\\],;:\\s@]{2,})$/i\n  );\n  const validPasswordRegex = RegExp(/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/);\n\n  const validateForm = (errors) => {\n    let valid = true;\n    Object.values(errors).forEach(\n      (val) => val.length > 0 && (valid = false) //If expr1 can be converted to true, returns expr2; else, returns expr1.\n    );\n    setValidate(valid);\n    return valid;\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    validateForm(stateErrors);\n  };\n\n  const handleChange = (event) => {\n    setValidate(false);\n    const { name, value } = event.target;\n    let errors = stateErrors;\n\n    switch (name) {\n      case \"name\":\n        errors.name = value.length < 2 ? \"Please, provide name.\" : \"\";\n        break;\n      case \"number\":\n        errors.number =\n          value.length < 8 ? \"Number must be 8 characters long.\" : \"\";\n        break;\n      case \"email\":\n        errors.email = validEmailRegex.test(value)\n          ? \"\"\n          : \"Please provide a valid e-mail.\";\n        break;\n      case \"password\":\n        errors.password = validPasswordRegex.test(value)\n          ? \"\"\n          : \"Password must be minimum eight characters, at least one letter and one number.\";\n        break;\n      case \"text\":\n        errors.text = value.length < 5 ? \"Enter your message.\" : \"\";\n        break;\n      case \"radioBoxOption\":\n        errors.radioBoxOption = event.target.checked\n          ? \"\"\n          : \"One of these options is required.\";\n        break;\n      case \"checkBoxOption\":\n        errors.checkboxOption = event.target.checked\n          ? \"\"\n          : \"This checkbox is required.\";\n        break;\n      default:\n        break;\n    }\n\n    setErrors({ ...errors });\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"form-wrapper\">\n        <h2>Form</h2>\n        <Form onSubmit={handleSubmit} noValidate validated={validated}>\n          <Form.Row>\n            <Form.Group as={Col}>\n              <Form.Label htmlFor=\"name\">Name</Form.Label>\n              <Form.Control\n                type=\"text\"\n                name=\"name\"\n                onChange={handleChange}\n                isInvalid={!!stateErrors.name}\n              />\n              {stateErrors.name && (\n                <small className=\"error\">{stateErrors.name}</small>\n              )}\n            </Form.Group>\n            <Form.Group as={Col}>\n              <Form.Label htmlFor=\"number\">Number</Form.Label>\n              <Form.Control\n                type=\"number\"\n                name=\"number\"\n                onChange={handleChange}\n                isInvalid={!!stateErrors.number}\n              />\n              {stateErrors.number && (\n                <small className=\"error\">{stateErrors.number}</small>\n              )}\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group as={Col}>\n              <Form.Label htmlFor=\"email\">Email</Form.Label>\n              <Form.Control\n                type=\"email\"\n                name=\"email\"\n                onChange={handleChange}\n                isInvalid={!!stateErrors.email}\n              />\n              {stateErrors.email && (\n                <small className=\"error\">{stateErrors.email}</small>\n              )}\n            </Form.Group>\n            <Form.Group as={Col}>\n              <Form.Label htmlFor=\"password\">Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                name=\"password\"\n                onChange={handleChange}\n                isInvalid={!!stateErrors.password}\n              />\n              {stateErrors.password && (\n                <small className=\"error\">{stateErrors.password}</small>\n              )}\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group as={Col}>\n              <Form.Label htmlFor=\"textarea\">Text</Form.Label>\n              <Form.Control\n                name=\"text\"\n                as=\"textarea\"\n                rows=\"4\"\n                onChange={handleChange}\n                isInvalid={!!stateErrors.text}\n              />\n              {stateErrors.text && (\n                <small className=\"error\">{stateErrors.text}</small>\n              )}\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group as={Col}>\n              <Form.Label htmlFor=\"select\">Select</Form.Label>\n              <Form.Control name=\"select\" as=\"select\" onChange={handleChange}>\n                <option>Option 1</option>\n                <option>Option 2</option>\n                <option>Option 3</option>\n                <option>Option 4</option>\n                <option>Option 5</option>\n              </Form.Control>\n            </Form.Group>\n            <Form.Group as={Col}>\n              <Form.Check\n                type=\"radio\"\n                name=\"radioBoxOption\"\n                label=\"RadioBox Option 1\"\n                value=\"radioBoxOption1\"\n                onChange={handleChange}\n              />\n              <Form.Check\n                type=\"radio\"\n                name=\"radioBoxOption\"\n                label=\"RadioBox Option 2\"\n                value=\"radioBoxOption2\"\n                onChange={handleChange}\n              />\n              <Form.Check\n                type=\"radio\"\n                name=\"radioBoxOption\"\n                label=\"RadioBox Option 3\"\n                value=\"radioBoxOption3\"\n                onChange={handleChange}\n              />\n              {stateErrors.radioBoxOption && (\n                <small className=\"error\">{stateErrors.radioBoxOption}</small>\n              )}\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group as={Col}>\n              <Form.Check\n                type=\"checkbox\"\n                name=\"checkBoxOption\"\n                label=\"Checkbox Option\"\n                onChange={handleChange}\n                required\n              />\n              {stateErrors.checkboxOption && (\n                <small className=\"error\">{stateErrors.checkboxOption}</small>\n              )}\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group as={Col}>\n              {\" \"}\n              <Button\n                variant=\"danger\"\n                type=\"reset\"\n                onClick={() => {\n                  setErrors(initialErrors);\n                  setValidate(false);\n                }}\n              >\n                Reset\n              </Button>\n            </Form.Group>\n            <Form.Group as={Col}>\n              <Button variant=\"primary\" type=\"submit\">\n                Submit\n              </Button>\n            </Form.Group>\n          </Form.Row>\n        </Form>\n      </div>\n    </div>\n  );\n}\n\nexport default FormExample;\n","import React from \"react\";\nimport {Container} from \"react-bootstrap\";\nimport \"./App.css\";\nimport FormExample from \"./FormExample\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Container>\n      <FormExample />\n        </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}